import json
import posixpath

from django import template
from django.conf import settings
from django.contrib.staticfiles.storage import staticfiles_storage
from django.core.exceptions import ImproperlyConfigured
from django.utils.safestring import mark_safe

try:
    import markdown as _markdown
except ImportError:
    _markdown = None

from arcutils.settings import get_setting


register = template.Library()


@register.simple_tag
def cdn_url(path, scheme=None):
    """Generate a CDN URL like '//cdn.research.pdx.edu/some/path'.

    URLs generated by this function will not include an explicit scheme
    unless a ``scheme`` is passed. In most cases, not including the
    scheme is preferable because the browser will automatically use the
    scheme that was used to load the page.

    ``path`` can be a path or a key from the ``ARC['cdn']['paths']``
    setting.

    Example::

        {% load arc %}
        <script src="{% cdn_url 'jquery/2.1.1/jquery-2.1.1.min.js %}"></script>

    To inject a version from the ``ARC['versions']`` setting into the
    URL, include ``{key}`` somewhere in ``path``. E.g.::

        <script src="{% cdn_url 'jquery/{jquery}/jquery-{jquery}.min.js' %}</script>

    Another option is to define paths via the ``ARC['cdn']['paths']``
    setting. For example::

        # In the project's settings:
        ARC['cdn']['paths'] = {
            'jquery-js': 'jquery/{jquery}/jquery-{jquery}.min.js',
            ...
        }

        # In a template:
        {% load arc %}
        <script src="{% cdn_url 'jquery-js' %}"></script>

    The latter form allows the CDN URL for a particular resource to be
    defined in a single place for easy reuse and updating.

    """
    host = get_setting('ARC.cdn.host', 'cdn.research.pdx.edu')
    path = get_setting('ARC.cdn.paths.%s' % path, path)
    versions = get_setting('ARC.versions', {})
    path = path.format(**versions)
    url = '//{host}/{path}'.format(host=host, path=path.lstrip('/'))
    if scheme is not None:
        url = '{scheme}:{url}'.format(scheme=scheme, url=url)
    return mark_safe(url)


@register.filter
def jsonify(obj):
    return mark_safe(json.dumps(obj))


@register.filter
def markdown(content):
    if _markdown is None:
        raise ImproperlyConfigured('Markdown must be installed to use the markdown template filter')
    return mark_safe(_markdown.markdown(content))


@register.simple_tag
def require_block(app_name, *cdn_urls):
    """Output <script> tags for loading a RequireJS entry point.

    This chooses the appropriate scripts according to the ``DEBUG``
    setting. In debug mode, this outputs the following tags::

        <script src="/static/requireConfig.js"></script>
        <script src="/static/vendor/requirejs/require.js"></script>
        <script src="/static/{app_name}/main.js"></script>

    In production, this outputs the following tags::

        <script src="/static/vendor/almond/almond.js"></script>
        ... CDN <script>s ...
        <script src="/static/{app_name}/main-built.js"></script>

    .. note:: These examples assume STATIC_URL is set to '/static/'.

    requireConfig.js must be in the project's top level static directory
    and contain RequireJS config like this::

        var require = {
            baseUrl: '/static',  // Same as STATIC_URL, minus trailing slash
            paths: {
                almond: 'vendor/almond/almond',
                ng: 'vendor/angular/angular',
                ...,
                quickticket: '.'  // Replace quickticket with project name
            }
            shim: {
                ng: {
                    exports: 'angular'
                },
                ngResource: {
                    deps: ['ng']
                },
                ...
            }
        }

    """
    debug = settings.DEBUG
    file_name = 'main.js' if debug else 'main-built.js'
    entry_point = posixpath.join(app_name, file_name)
    scripts = []
    if debug:
        scripts.append(staticfiles_storage.url('requireConfig.js'))
        scripts.append(staticfiles_storage.url('vendor/requirejs/require.js'))
    else:
        scripts.append(staticfiles_storage.url('vendor/almond/almond.js'))
        for src in cdn_urls:
            scripts.append(cdn_url(src))
    scripts.append(staticfiles_storage.url(entry_point))
    scripts = ['<script src="{src}"></script>'.format(src=s) for s in scripts]
    scripts = '\n    '.join(scripts)
    return mark_safe(scripts)
