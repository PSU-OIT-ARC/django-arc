; This provides a (hopefully) reasonable set of default settings for
; ARC projects. To use this in a project, add the following line to its
; local settings file (typically the DEFAULT section of local.base.cfg):
;
;     extends = "arcutils:local.base.cfg"
;
; You could also simply copy this file into the project and tweak it as
; necessary.

[DEFAULT]
PROJECT.title = null

; Miscellaneous Django stuff
DEBUG = false
ROOT_URLCONF = "{PACKAGE}.urls"
WSGI_APPLICATION = "{PACKAGE}.wsgi.application"

; ARC CDN
ARC.cdn.host = "cdn.research.pdx.edu"
; Entries are key => path.
; Example: ARC.cdn.paths.jquery-js = "/path/to/jquery/on/cdn"
ARC.cdn.paths = {}
; Entries are library/package name => version:
; Example: ARC.versions.jquery = "2.1.1"
ARC.versions.bootstrap = "3.3.5"

; Auth

; CAS
CAS.auto_create_user = true
; Base URL for the CAS server; it should end with a slash.
CAS.base_url = "https://sso.pdx.edu/idp/profile/cas/"
; These will be joined to CAS.base_url to form the login & logout URLs.
; An absolute path can be used to override the base_url path prefix.
CAS.login_path = "login"
CAS.logout_path = "/idp/profile/Logout"
CAS.validate_path = "serviceValidate"
CAS.session_key.redirect_to = "CAS.redirect_to"
; This specifies whether users should be redirected to the CAS logout
; page to log them out of CAS. If this is false, users will only be
; logged out of Django, which isn't very useful, since they can log
; directly back in without having to enter their credentials.
CAS.logout_completely = true
; Set this to force redirection back to a specific URL instead of to the
; referring page.
CAS.redirect_url =
; These callbacks are called when CAS login is successful. The CAS XML
; response is parsed into a dictionary of user attributes, which is
; passed to each callback in turn. The default callback constructs a
; standard User object from those attributes if the user doesn't already
; exist.
CAS.response_callbacks = ["arcutils.cas.callbacks.default_response_callback"]

; The STAFF and SUPERUSERS settings can be used to automatically create
; staff and superusers on first login. The default CAS response callback
; uses them.
STAFF = []
; If a user is in this list, they'll automatically be made staff too
; (when using the default CAS response callback).
SUPERUSERS = []

; Database
; PostgreSQL is ARC's preferred RDBMS
DATABASES.default.ENGINE = "django.db.backends.postgresql_psycopg2"

; Django REST Framework
REST_FRAMEWORK.DEFAULT_AUTHENTICATION_CLASSES = ["arcutils.drf.authentication.SessionAuthentication"]

; Email
DEFAULT_FROM_EMAIL = "{PACKAGE}-{ENV}.info@pdx.edu"
SERVER_EMAIL = "{PACKAGE}-{ENV}.errors@pdx.edu"

; LDAP
; Notes:
;    - There are two LDAP hosts, ldap-bulk and ldap-login; Elliot has
;      said that ldap-login "has more servers in the pool" and he
;      recommends using it over ldap-bulk (RT ticket #580686); note that
;      despite the name, ldap-login does not actually require auth
;    - It's possible to do unauthenticated requests over SSL
;    - It's also possible to do authenticated requests over non-SSL
;    - To use SSL, set ``use_ssl`` to ``true``
;    - A project will need an LDAP service account if it does LDAP
;      requests that return more than 2,000 results
;    - The defaults here support a typical Odin autocomplete scenario
LDAP.default.host = "ldap-login.oit.pdx.edu"
LDAP.default.port = null
LDAP.default.use_ssl = false
LDAP.default.search_base = "ou=people,dc=pdx,dc=edu"
LDAP.default.username = null
LDAP.default.password = null
LDAP.default.strategy = "SYNC"
LDAP.default.tls.ca_certs_file = "certifi:cacert.pem"
LDAP.default.tls.validate = "CERT_REQUIRED"
; This can be set to one of the protocol versions in the ssl module
; (e.g., "PROTOCOL_SSLv23"); if it's not set, the ldap3 library will
; choose a default value (which is "PROTOCOL_SSLv23" currently)
LDAP.default.tls.version = null
; Active Directory
; To connect to AD, a service account is required; request it from
; cis-windows.
LDAP.ad.hosts = ["oitdcpsu01.psu.ds.pdx.edu", "oitdcpsu02.psu.ds.pdx.edu"]
LDAP.ad.use_ssl = true
LDAP.ad.strategy = "SYNC"
LDAP.ad.search_base = "ou=people,dc=psu,dc=ds,dc=pdx,dc=edu"
; These are required for AD and must be in the project's local settings:
;LDAP.ad.username = null
;LDAP.ad.password = null

; Localization
LANGUAGE_CODE = "en-us"
TIME_ZONE = "America/Los_Angeles"
USE_I18N = true
USE_L10N = true
USE_TZ = true

; Logging
LOGGING.version = 1
LOGGING.disable_existing_loggers = false
LOGGING.formatters.verbose.style = "{{"
LOGGING.formatters.verbose.format = "[{{asctime}}] {{levelname}} {{pathname}}:{{lineno}} {{message}}"
LOGGING.formatters.verbose.datefmt = "%d/%b/%Y %H:%M:%S"
LOGGING.handlers.console.class = "logging.StreamHandler"
LOGGING.handlers.console.formatter = "verbose"

; Static files
MEDIA_URL = "/media/"
STATIC_URL = "/static/"
STATICFILES_DIRS = ["{PACKAGE_DIR}/static", "{ARCUTILS_PACKAGE_DIR}/static"]

; Templates
TEMPLATES.0.BACKEND = "django.template.backends.django.DjangoTemplates"
TEMPLATES.0.DIRS = ["{PACKAGE_DIR}/templates", "{ARCUTILS_PACKAGE_DIR}/templates"]
TEMPLATES.0.OPTIONS.context_processors = [
        "django.template.context_processors.debug",
        "django.template.context_processors.request",
        "django.contrib.auth.context_processors.auth",
        "django.contrib.messages.context_processors.messages",
        "arcutils.context_processors.defaults"
    ]

INSTALLED_APPS = [
        "django.contrib.admin",
        "django.contrib.auth",
        "django.contrib.contenttypes",
        "django.contrib.sessions",
        "django.contrib.messages",
        "django.contrib.staticfiles",
        "arcutils"
    ]
; In simple cases, you can set this to a list of additional apps to
; install in the project's settings.
EXTRA.INSTALLED_APPS = null
; A dict of { app in INSTALLED_APPS => app to swap in }
; Example: {"django.contrib.admin": "django.contrib.admin.apps.SimpleAdminConfig"}
SWAP.INSTALLED_APPS = null

MIDDLEWARE_CLASSES = [
        "django.contrib.sessions.middleware.SessionMiddleware",
        "django.middleware.common.CommonMiddleware",
        "django.middleware.csrf.CsrfViewMiddleware",
        "django.contrib.auth.middleware.AuthenticationMiddleware",
        "django.contrib.auth.middleware.SessionAuthenticationMiddleware",
        "django.contrib.messages.middleware.MessageMiddleware",
        "django.middleware.clickjacking.XFrameOptionsMiddleware",
        "django.middleware.security.SecurityMiddleware"
    ]
; In simple cases, you can set this to a list of additional middleware
; in the project's settings.
EXTRA.MIDDLEWARE_CLASSES = null
; A dict of { middleware in MIDDLEWARE_CLASSES => middleware to swap in }
SWAP.MIDDLEWARE_CLASSES = null

[dev]
ENV = "dev"
DEBUG = true
DATABASES.default.HOST = ""
DATABASES.default.NAME = "{PACKAGE}"
DATABASES.default.USER = ""
DATABASES.default.PASSWORD = ""
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
INTERNAL_IPS = "arcutils.settings.INTERNAL_IPS"

; Logging
LOGGING.handlers.console.level = "DEBUG"
LOGGING.loggers.arcutils.handlers = ["console"]
LOGGING.loggers.arcutils.level = "DEBUG"
LOGGING.loggers.{PACKAGE}.handlers = ["console"]
LOGGING.loggers.{PACKAGE}.level = "DEBUG"

; This causes all django.* loggers (django.request in particular) to
; propagate to the django logger (and use our verbose formatter, but
; that's not the important thing here). Without this, exceptions in app
; code won't be logged anywhere because Django catches them and shows
; its debugging page instead, which isn't very helpful when exceptions
; occur in an AJAX request. I like seeing exceptions in the console
; regardless.
LOGGING.loggers.django.handlers = ["console"]

SECRET_KEY = "NOT A SECRET"
MEDIA_ROOT  = "{PACKAGE_DIR}/../media"
STATIC_ROOT = "{PACKAGE_DIR}/../static"
TEMPLATES.0.APP_DIRS = true
TEMPLATES.0.OPTIONS.debug = true
; List of settings to import from strings; uses Django's import_string
; utility. If a setting in this list is not a string, its value will not
; be changed.
IMPORT_FROM_STRING = ["INTERNAL_IPS"]

[test]
ENV = "test"
TEST = true
DATABASES.default.HOST = ""
DATABASES.default.NAME = "{PACKAGE}"
DATABASES.default.USER = ""
DATABASES.default.PASSWORD = ""
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
LOGGING.disable_existing_loggers = true
LOGGING.root.level = "ERROR"
PASSWORD_HASHERS = ["django.contrib.auth.hashers.MD5PasswordHasher"]
SECRET_KEY = "NOT A SECRET"
TEMPLATES.0.APP_DIRS = true

[stage]
ENV = "stage"
ALLOWED_HOSTS = ["{PACKAGE}.stage.rc.pdx.edu"]
DATABASES.default.HOST = "merope.rc.pdx.edu"
DATABASES.default.NAME = "{PACKAGE}_stage"
DATABASES.default.USER = "{PACKAGE}_stage_l"
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"

; Logging
; This is similar to the [prod] logging setup minus the Logstash config;
; see the notes in the [prod] section for more details.
LOGGING.handlers.console.level = "INFO"
LOGGING.handlers.mail_admins.class = "django.utils.log.AdminEmailHandler"
LOGGING.handlers.mail_admins.level = "ERROR"
LOGGING.handlers.mail_admins.formatter = "verbose"
LOGGING.root.level = "INFO"
LOGGING.root.handlers = ["console", "mail_admins"]
LOGGING.loggers.(arcutils.mail_admins).level = "INFO"
LOGGING.loggers.(arcutils.mail_admins).handlers = ["mail_admins"]

MEDIA_ROOT = "/vol/www/{PACKAGE}/media/{ENV}"
STATIC_ROOT = "/vol/www/{PACKAGE}/static/{ENV}"
TEMPLATES.0.APP_DIRS = true

[prod]
ENV = "prod"
DEBUG = false
DATABASES.default.HOST = "postgresql.rc.pdx.edu"
DATABASES.default.NAME = "{PACKAGE}"
DATABASES.default.USER = "{PACKAGE}_l"
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"

; Logging
; Everything that propagates to the root level and is at the INFO level
; or higher will be logged to the console and to Logstash. ERROR level
; messages will also be mailed to ADMINS.
LOGGING.handlers.console.level = "INFO"
LOGGING.handlers.logstash.class = "stashward.StashwardHandler"
LOGGING.handlers.logstash.level = "INFO"
LOGGING.handlers.logstash.host = "logs.rc.pdx.edu"
LOGGING.handlers.logstash.port = 5043
LOGGING.handlers.logstash.ca_certs = "{ARCUTILS_PACKAGE_DIR}/PSUCA.crt"
LOGGING.handlers.logstash.message_type = "django"
LOGGING.handlers.mail_admins.class = "django.utils.log.AdminEmailHandler"
LOGGING.handlers.mail_admins.level = "ERROR"
LOGGING.handlers.mail_admins.formatter = "verbose"
LOGGING.root.level = "INFO"
LOGGING.root.handlers = ["console", "logstash", "mail_admins"]
; The arcutils.mail_admins logger can be used to send log messages
; directly to ADMINS, without regard to level (except that DEBUG
; messages are ignored).
LOGGING.loggers.(arcutils.mail_admins).level = "INFO"
LOGGING.loggers.(arcutils.mail_admins).handlers = ["mail_admins"]

MEDIA_ROOT = "/vol/www/{PACKAGE}/media/{ENV}"
STATIC_ROOT = "/vol/www/{PACKAGE}/static/{ENV}"
STATICFILES_STORAGE = "django.contrib.staticfiles.storage.ManifestStaticFilesStorage"
TEMPLATES.0.OPTIONS.debug = false
TEMPLATES.0.OPTIONS.loaders = [
        ["django.template.loaders.cached.Loader", [
            "django.template.loaders.filesystem.Loader",
            "django.template.loaders.app_directories.Loader"
        ]]
    ]
